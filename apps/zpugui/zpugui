#!/usr/bin/python

import pygtk
import gtk
import os
import threading
import signal
import sys

zpu = os.open("/dev/zpu", os.O_RDWR)

def read_loop(buf):
	while True:
		print "Reading"
		
		try: out = os.read(zpu, 1024)
		except KeyboardInterrupt: break
		
		print "Read %s" % out
		
		buf.insert(buf.get_start_iter(), "%s\n" % out)

def send_stdin(entry, event):
	if gtk.gdk.keyval_name(event.keyval) == "Return" and len(entry.get_text()) > 0:
		print "Write %s" % entry.get_text()
		os.write(zpu, entry.get_text())
		entry.set_text("")

def delete_event(widget, event, data=None):
	return False
	
	
	
def destroy(widget, data=None):
	gtk.main_quit()
	sys.exit(0)

window = gtk.Window(gtk.WINDOW_TOPLEVEL)
window.connect("destroy", destroy)
window.connect("delete_event", delete_event)
window.resize(640,480)

buf = gtk.TextBuffer()
buf.set_text("")

buf_in = gtk.Entry()
buf_in.connect("key-press-event", send_stdin)
label_in = gtk.Label("Input: ")	
label_in

top = gtk.HBox(False, 3)
top.add(label_in)
top.add(buf_in)

view = gtk.TextView(buf)
view.set_editable(False)

scr = gtk.ScrolledWindow()
scr.add_with_viewport(view)
scr.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_ALWAYS)

t = threading.Thread(target=read_loop, args=(buf,))
t.daemon = True
t.start()

pane = gtk.VPaned()
pane.add(top)
pane.add(scr)

window.add(pane)

window.show_all()

gtk.gdk.threads_init()
gtk.main()
